/* automatically generated by rust-bindgen */

use core::libc::*;
pub type __u_char = c_uchar;
pub type __u_short = c_ushort;
pub type __u_int = c_uint;
pub type __u_long = c_ulong;
pub type __int8_t = c_schar;
pub type __uint8_t = c_uchar;
pub type __int16_t = c_short;
pub type __uint16_t = c_ushort;
pub type __int32_t = c_int;
pub type __uint32_t = c_uint;
pub type __int64_t = c_long;
pub type __uint64_t = c_ulong;
pub type __quad_t = c_long;
pub type __u_quad_t = c_ulong;
pub type __dev_t = c_ulong;
pub type __uid_t = c_uint;
pub type __gid_t = c_uint;
pub type __ino_t = c_ulong;
pub type __ino64_t = c_ulong;
pub type __mode_t = c_uint;
pub type __nlink_t = c_ulong;
pub type __off_t = c_long;
pub type __off64_t = c_long;
pub type __pid_t = c_int;
pub struct __fsid_t {
    pub __val: [c_int, ..2u],
}
pub type __clock_t = c_long;
pub type __rlim_t = c_ulong;
pub type __rlim64_t = c_ulong;
pub type __id_t = c_uint;
pub type __time_t = c_long;
pub type __useconds_t = c_uint;
pub type __suseconds_t = c_long;
pub type __daddr_t = c_int;
pub type __key_t = c_int;
pub type __clockid_t = c_int;
pub type __timer_t = *c_void;
pub type __blksize_t = c_long;
pub type __blkcnt_t = c_long;
pub type __blkcnt64_t = c_long;
pub type __fsblkcnt_t = c_ulong;
pub type __fsblkcnt64_t = c_ulong;
pub type __fsfilcnt_t = c_ulong;
pub type __fsfilcnt64_t = c_ulong;
pub type __fsword_t = c_long;
pub type __ssize_t = c_long;
pub type __syscall_slong_t = c_long;
pub type __syscall_ulong_t = c_ulong;
pub type __loff_t = __off64_t;
pub type __qaddr_t = *__quad_t;
pub type __caddr_t = *c_schar;
pub type __intptr_t = c_long;
pub type __socklen_t = c_uint;
pub type u_char = __u_char;
pub type u_short = __u_short;
pub type u_int = __u_int;
pub type u_long = __u_long;
pub type quad_t = __quad_t;
pub type u_quad_t = __u_quad_t;
pub type fsid_t = __fsid_t;
pub type loff_t = __loff_t;
pub type ino_t = __ino_t;
pub type dev_t = __dev_t;
pub type gid_t = __gid_t;
pub type mode_t = __mode_t;
pub type nlink_t = __nlink_t;
pub type uid_t = __uid_t;
pub type off_t = __off_t;
pub type pid_t = __pid_t;
pub type id_t = __id_t;
pub type ssize_t = __ssize_t;
pub type daddr_t = __daddr_t;
pub type caddr_t = __caddr_t;
pub type key_t = __key_t;
pub type clock_t = __clock_t;
pub type time_t = __time_t;
pub type clockid_t = __clockid_t;
pub type timer_t = __timer_t;
pub type ptrdiff_t = c_long;
pub type size_t = c_ulong;
pub type wchar_t = c_int;
pub type ulong = c_ulong;
pub type ushort = c_ushort;
pub type uint = c_uint;
pub type int8_t = c_schar;
pub type int16_t = c_short;
pub type int32_t = c_int;
pub type int64_t = c_long;
pub type u_int8_t = c_uchar;
pub type u_int16_t = c_ushort;
pub type u_int32_t = c_uint;
pub type u_int64_t = c_ulong;
pub type register_t = c_long;
pub type __sig_atomic_t = c_int;
pub struct __sigset_t {
    pub __val: [c_ulong, ..16u],
}
pub type sigset_t = __sigset_t;
pub struct Struct_timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
pub struct Struct_timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
pub type suseconds_t = __suseconds_t;
pub type __fd_mask = c_long;
pub struct fd_set {
    pub __fds_bits: [__fd_mask, ..16u],
}
pub type fd_mask = __fd_mask;
pub type blksize_t = __blksize_t;
pub type blkcnt_t = __blkcnt_t;
pub type fsblkcnt_t = __fsblkcnt_t;
pub type fsfilcnt_t = __fsfilcnt_t;
pub type pthread_t = c_ulong;
pub struct Union_pthread_attr_t {
    pub data: [c_uchar, ..56u],
}
pub impl Union_pthread_attr_t {
    pub fn __size(&self) -> *[c_schar, ..56u] {
        unsafe { cast::reinterpret_cast(&ptr::to_unsafe_ptr(self)) }
    }
    pub fn __align(&self) -> *c_long {
        unsafe { cast::reinterpret_cast(&ptr::to_unsafe_ptr(self)) }
    }
}
pub type pthread_attr_t = Union_pthread_attr_t;
pub struct Struct___pthread_internal_list {
    pub __prev: *Struct___pthread_internal_list,
    pub __next: *Struct___pthread_internal_list,
}
pub type __pthread_list_t = Struct___pthread_internal_list;
pub struct Struct___pthread_mutex_s {
    pub __lock: c_int,
    pub __count: c_uint,
    pub __owner: c_int,
    pub __nusers: c_uint,
    pub __kind: c_int,
    pub __spins: c_int,
    pub __list: __pthread_list_t,
}
pub struct pthread_mutex_t {
    pub data: [c_uchar, ..40u],
}
pub impl pthread_mutex_t {
    pub fn __data(&self) -> *Struct___pthread_mutex_s {
        unsafe { cast::reinterpret_cast(&ptr::to_unsafe_ptr(self)) }
    }
    pub fn __size(&self) -> *[c_schar, ..40u] {
        unsafe { cast::reinterpret_cast(&ptr::to_unsafe_ptr(self)) }
    }
    pub fn __align(&self) -> *c_long {
        unsafe { cast::reinterpret_cast(&ptr::to_unsafe_ptr(self)) }
    }
}
pub struct pthread_mutexattr_t {
    pub data: [c_uchar, ..4u],
}
pub impl pthread_mutexattr_t {
    pub fn __size(&self) -> *[c_schar, ..4u] {
        unsafe { cast::reinterpret_cast(&ptr::to_unsafe_ptr(self)) }
    }
    pub fn __align(&self) -> *c_int {
        unsafe { cast::reinterpret_cast(&ptr::to_unsafe_ptr(self)) }
    }
}
pub struct Struct_Unnamed1 {
    pub __lock: c_int,
    pub __futex: c_uint,
    pub __total_seq: c_ulonglong,
    pub __wakeup_seq: c_ulonglong,
    pub __woken_seq: c_ulonglong,
    pub __mutex: *c_void,
    pub __nwaiters: c_uint,
    pub __broadcast_seq: c_uint,
}
pub struct pthread_cond_t {
    pub data: [c_uchar, ..48u],
}
pub impl pthread_cond_t {
    pub fn __data(&self) -> *Struct_Unnamed1 {
        unsafe { cast::reinterpret_cast(&ptr::to_unsafe_ptr(self)) }
    }
    pub fn __size(&self) -> *[c_schar, ..48u] {
        unsafe { cast::reinterpret_cast(&ptr::to_unsafe_ptr(self)) }
    }
    pub fn __align(&self) -> *c_longlong {
        unsafe { cast::reinterpret_cast(&ptr::to_unsafe_ptr(self)) }
    }
}
pub struct pthread_condattr_t {
    pub data: [c_uchar, ..4u],
}
pub impl pthread_condattr_t {
    pub fn __size(&self) -> *[c_schar, ..4u] {
        unsafe { cast::reinterpret_cast(&ptr::to_unsafe_ptr(self)) }
    }
    pub fn __align(&self) -> *c_int {
        unsafe { cast::reinterpret_cast(&ptr::to_unsafe_ptr(self)) }
    }
}
pub type pthread_key_t = c_uint;
pub type pthread_once_t = c_int;
pub struct Struct_Unnamed2 {
    pub __lock: c_int,
    pub __nr_readers: c_uint,
    pub __readers_wakeup: c_uint,
    pub __writer_wakeup: c_uint,
    pub __nr_readers_queued: c_uint,
    pub __nr_writers_queued: c_uint,
    pub __writer: c_int,
    pub __shared: c_int,
    pub __pad1: c_ulong,
    pub __pad2: c_ulong,
    pub __flags: c_uint,
}
pub struct pthread_rwlock_t {
    pub data: [c_uchar, ..56u],
}
pub impl pthread_rwlock_t {
    pub fn __data(&self) -> *Struct_Unnamed2 {
        unsafe { cast::reinterpret_cast(&ptr::to_unsafe_ptr(self)) }
    }
    pub fn __size(&self) -> *[c_schar, ..56u] {
        unsafe { cast::reinterpret_cast(&ptr::to_unsafe_ptr(self)) }
    }
    pub fn __align(&self) -> *c_long {
        unsafe { cast::reinterpret_cast(&ptr::to_unsafe_ptr(self)) }
    }
}
pub struct pthread_rwlockattr_t {
    pub data: [c_uchar, ..8u],
}
pub impl pthread_rwlockattr_t {
    pub fn __size(&self) -> *[c_schar, ..8u] {
        unsafe { cast::reinterpret_cast(&ptr::to_unsafe_ptr(self)) }
    }
    pub fn __align(&self) -> *c_long {
        unsafe { cast::reinterpret_cast(&ptr::to_unsafe_ptr(self)) }
    }
}
pub type pthread_spinlock_t = c_int;
pub struct pthread_barrier_t {
    pub data: [c_uchar, ..32u],
}
pub impl pthread_barrier_t {
    pub fn __size(&self) -> *[c_schar, ..32u] {
        unsafe { cast::reinterpret_cast(&ptr::to_unsafe_ptr(self)) }
    }
    pub fn __align(&self) -> *c_long {
        unsafe { cast::reinterpret_cast(&ptr::to_unsafe_ptr(self)) }
    }
}
pub struct pthread_barrierattr_t {
    pub data: [c_uchar, ..4u],
}
pub impl pthread_barrierattr_t {
    pub fn __size(&self) -> *[c_schar, ..4u] {
        unsafe { cast::reinterpret_cast(&ptr::to_unsafe_ptr(self)) }
    }
    pub fn __align(&self) -> *c_int {
        unsafe { cast::reinterpret_cast(&ptr::to_unsafe_ptr(self)) }
    }
}
pub type uint8_t = c_uchar;
pub type uint16_t = c_ushort;
pub type uint32_t = c_uint;
pub type uint64_t = c_ulong;
pub type int_least8_t = c_schar;
pub type int_least16_t = c_short;
pub type int_least32_t = c_int;
pub type int_least64_t = c_long;
pub type uint_least8_t = c_uchar;
pub type uint_least16_t = c_ushort;
pub type uint_least32_t = c_uint;
pub type uint_least64_t = c_ulong;
pub type int_fast8_t = c_schar;
pub type int_fast16_t = c_long;
pub type int_fast32_t = c_long;
pub type int_fast64_t = c_long;
pub type uint_fast8_t = c_uchar;
pub type uint_fast16_t = c_ulong;
pub type uint_fast32_t = c_ulong;
pub type uint_fast64_t = c_ulong;
pub type intptr_t = c_long;
pub type uintptr_t = c_ulong;
pub type intmax_t = c_long;
pub type uintmax_t = c_ulong;
pub type http_parser = Struct_http_parser;
pub type http_parser_settings = Struct_http_parser_settings;
pub type http_data_cb = *u8;
pub type http_cb = *u8;
pub type Enum_http_method = c_uint;
pub static HTTP_DELETE: c_uint = 0;
pub static HTTP_GET: c_uint = 1;
pub static HTTP_HEAD: c_uint = 2;
pub static HTTP_POST: c_uint = 3;
pub static HTTP_PUT: c_uint = 4;
pub static HTTP_CONNECT: c_uint = 5;
pub static HTTP_OPTIONS: c_uint = 6;
pub static HTTP_TRACE: c_uint = 7;
pub static HTTP_COPY: c_uint = 8;
pub static HTTP_LOCK: c_uint = 9;
pub static HTTP_MKCOL: c_uint = 10;
pub static HTTP_MOVE: c_uint = 11;
pub static HTTP_PROPFIND: c_uint = 12;
pub static HTTP_PROPPATCH: c_uint = 13;
pub static HTTP_SEARCH: c_uint = 14;
pub static HTTP_UNLOCK: c_uint = 15;
pub static HTTP_REPORT: c_uint = 16;
pub static HTTP_MKACTIVITY: c_uint = 17;
pub static HTTP_CHECKOUT: c_uint = 18;
pub static HTTP_MERGE: c_uint = 19;
pub static HTTP_MSEARCH: c_uint = 20;
pub static HTTP_NOTIFY: c_uint = 21;
pub static HTTP_SUBSCRIBE: c_uint = 22;
pub static HTTP_UNSUBSCRIBE: c_uint = 23;
pub static HTTP_PATCH: c_uint = 24;
pub static HTTP_PURGE: c_uint = 25;
pub type Enum_http_parser_type = c_uint;
pub static HTTP_REQUEST: c_uint = 0;
pub static HTTP_RESPONSE: c_uint = 1;
pub static HTTP_BOTH: c_uint = 2;
pub type Enum_flags = c_uint;
pub static F_CHUNKED: c_uint = 1;
pub static F_CONNECTION_KEEP_ALIVE: c_uint = 2;
pub static F_CONNECTION_CLOSE: c_uint = 4;
pub static F_TRAILING: c_uint = 8;
pub static F_UPGRADE: c_uint = 16;
pub static F_SKIPBODY: c_uint = 32;
pub type Enum_http_errno = c_uint;
pub static HPE_OK: c_uint = 0;
pub static HPE_CB_message_begin: c_uint = 1;
pub static HPE_CB_status_complete: c_uint = 2;
pub static HPE_CB_url: c_uint = 3;
pub static HPE_CB_header_field: c_uint = 4;
pub static HPE_CB_header_value: c_uint = 5;
pub static HPE_CB_headers_complete: c_uint = 6;
pub static HPE_CB_body: c_uint = 7;
pub static HPE_CB_message_complete: c_uint = 8;
pub static HPE_INVALID_EOF_STATE: c_uint = 9;
pub static HPE_HEADER_OVERFLOW: c_uint = 10;
pub static HPE_CLOSED_CONNECTION: c_uint = 11;
pub static HPE_INVALID_VERSION: c_uint = 12;
pub static HPE_INVALID_STATUS: c_uint = 13;
pub static HPE_INVALID_METHOD: c_uint = 14;
pub static HPE_INVALID_URL: c_uint = 15;
pub static HPE_INVALID_HOST: c_uint = 16;
pub static HPE_INVALID_PORT: c_uint = 17;
pub static HPE_INVALID_PATH: c_uint = 18;
pub static HPE_INVALID_QUERY_STRING: c_uint = 19;
pub static HPE_INVALID_FRAGMENT: c_uint = 20;
pub static HPE_LF_EXPECTED: c_uint = 21;
pub static HPE_INVALID_HEADER_TOKEN: c_uint = 22;
pub static HPE_INVALID_CONTENT_LENGTH: c_uint = 23;
pub static HPE_INVALID_CHUNK_SIZE: c_uint = 24;
pub static HPE_INVALID_CONSTANT: c_uint = 25;
pub static HPE_INVALID_INTERNAL_STATE: c_uint = 26;
pub static HPE_STRICT: c_uint = 27;
pub static HPE_PAUSED: c_uint = 28;
pub static HPE_UNKNOWN: c_uint = 29;
pub struct Struct_http_parser {
    pub _type_flags: c_uchar,
    pub state: c_uchar,
    pub header_state: c_uchar,
    pub index: c_uchar,
    pub nread: uint32_t,
    pub content_length: uint64_t,
    pub http_major: c_ushort,
    pub http_minor: c_ushort,
    pub status_code: c_ushort,
    pub method: c_uchar,
    pub http_errno_upgrade: c_uchar,
    pub data: *c_void,
}
pub struct Struct_http_parser_settings {
    pub on_message_begin: http_cb,
    pub on_url: http_data_cb,
    pub on_status_complete: http_cb,
    pub on_header_field: http_data_cb,
    pub on_header_value: http_data_cb,
    pub on_headers_complete: http_cb,
    pub on_body: http_data_cb,
    pub on_message_complete: http_cb,
}
pub type Enum_http_parser_url_fields = c_uint;
pub static UF_SCHEMA: c_uint = 0;
pub static UF_HOST: c_uint = 1;
pub static UF_PORT: c_uint = 2;
pub static UF_PATH: c_uint = 3;
pub static UF_QUERY: c_uint = 4;
pub static UF_FRAGMENT: c_uint = 5;
pub static UF_USERINFO: c_uint = 6;
pub static UF_MAX: c_uint = 7;
pub struct Struct_http_parser_url {
    pub field_set: uint16_t,
    pub port: uint16_t,
    pub field_data: [Struct_Unnamed3, ..7u],
}
pub struct Struct_Unnamed3 {
    pub off: uint16_t,
    pub len: uint16_t,
}
pub extern "C" {
    fn select(__nfds: c_int, __readfds: *fd_set, __writefds: *fd_set,
              __exceptfds: *fd_set, __timeout: *Struct_timeval) -> c_int;
    fn pselect(__nfds: c_int, __readfds: *fd_set, __writefds: *fd_set,
               __exceptfds: *fd_set, __timeout: *Struct_timespec,
               __sigmask: *__sigset_t) -> c_int;
    fn gnu_dev_major(__dev: c_ulonglong) -> c_uint;
    fn gnu_dev_minor(__dev: c_ulonglong) -> c_uint;
    fn gnu_dev_makedev(__major: c_uint, __minor: c_uint) -> c_ulonglong;
    fn http_parser_init(parser: *http_parser, _type: Enum_http_parser_type);
    fn http_parser_execute(parser: *http_parser,
                           settings: *http_parser_settings, data: *c_schar,
                           len: size_t) -> size_t;
    fn http_should_keep_alive(parser: *http_parser) -> c_int;
    fn http_method_str(m: Enum_http_method) -> *c_schar;
    fn http_errno_name(err: Enum_http_errno) -> *c_schar;
    fn http_errno_description(err: Enum_http_errno) -> *c_schar;
    fn http_parser_parse_url(buf: *c_schar, buflen: size_t, is_connect: c_int,
                             u: *Struct_http_parser_url) -> c_int;
    fn http_parser_pause(parser: *http_parser, paused: c_int);
    fn http_body_is_final(parser: *http_parser) -> c_int;
}
